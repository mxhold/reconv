{"version":3,"sources":["../../reconv-domain/src/index.js","components/recipe/Ingredient.module.css","components/recipe/RecipeInput.module.css","components/definitions/RecipeDefinitionsInputs.module.css","components/definitions/DefinitionsInput.module.css","components/recipe/ConvertedRecipe.module.css","../../reconv-domain/src/convertIngredient.js","../../reconv-domain/src/parseIngredient.js","components/recipe/Ingredient.js","components/recipe/ConvertedRecipe.js","components/recipe/RecipeInput.js","components/definitions/DefinitionsInput.js","components/definitions/RecipeDefinitionsInputs.js","App.js","serviceWorker.js","index.js"],"names":["_require2","__webpack_require__","_slicedToArray","convertIngredient","convertIngredientError","parseIngredient","defaultUnitDefinitions","defaultIngredientDefinitions","module","exports","malformed","unitNotFound","ingredientNotFound","badQuantity","badUnitDefinition","badIngredientDefinition","wrapper","input","output","inputField","child","showDefinitionsToggle","definitionField","definitionFormatExample","convertedRecipe","Fraction","DIVIDE_BY_ZERO","BAD_FORMAT","BAD_DEFINITION","UNRECOGNIZED","ingredient","ingredient_definitions","unit_definitions","arguments","length","quantityFraction","resolvedUnit","find","unit_defintion","unit","resolvedIngredient","ingredient_definition","name","errors","quantity","e","DivisionByZero","InvalidParameter","attribute","mL","isNaN","density","success","result","mul","round","toString","string","re","matches","exec","errorMessage","Ingredient","props","quantityClassName","unitClassName","ingredientClassName","styles","react_default","a","createElement","className","MalformedIngredient","ConvertedRecipe","ingredients","recipe","split","map","line","i","parseResult","parsedIngredient","convertResult","ingredientDefinitions","unitDefinitions","convertedIngredient","key","conversionErrors","RecipeInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","target","value","state","spellCheck","onChange","React","Component","DefinitionsInput","kind","csvFormat","handleValueChange","RecipeDefinitionsInputs","showDefinitions","handleShowDefinitionsChange","checked","definitions","handleUnitDefinitionsChange","handleIngredientDefinitionsChange","type","App","join","deserializeUnitDefinitions","_line$split","_line$split2","slicedToArray","Number","parseFloat","deserializeIngredientDefinitions","_line$split3","_line$split4","sparkleEmoji","role","aria-label","RecipeInput_RecipeInput","RecipeDefinitionsInputs_RecipeDefinitionsInputs","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a637204.chunk.js","sourcesContent":["var _slicedToArray = require(\"/Users/max/Projects/js/reconv/reconv/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _require = require('./convertIngredient'),\n    _require2 = _slicedToArray(_require, 2),\n    convertIngredient = _require2[0],\n    convertIngredientError = _require2[1];\n\nvar parseIngredient = require('./parseIngredient');\n\nvar defaultUnitDefinitions = require('../data/units');\n\nvar defaultIngredientDefinitions = require('../data/ingredients');\n\nmodule.exports = {\n  convertIngredient: convertIngredient,\n  convertIngredientError: convertIngredientError,\n  parseIngredient: parseIngredient,\n  defaultUnitDefinitions: defaultUnitDefinitions,\n  defaultIngredientDefinitions: defaultIngredientDefinitions\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"malformed\":\"Ingredient_malformed__2IUis typography_ignored__1iMGB\",\"unitNotFound\":\"Ingredient_unitNotFound__1tZVF typography_mildError__1KRUa\",\"ingredientNotFound\":\"Ingredient_ingredientNotFound__1332z typography_mildError__1KRUa\",\"badQuantity\":\"Ingredient_badQuantity__eeLyl typography_mildError__1KRUa\",\"badUnitDefinition\":\"Ingredient_badUnitDefinition__QJPdr typography_seriousError__-Ji9E\",\"badIngredientDefinition\":\"Ingredient_badIngredientDefinition__CDLkR typography_seriousError__-Ji9E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"RecipeInput_wrapper__37iBa layout_flexWrap__3Mh7K\",\"input\":\"RecipeInput_input__35sHT layout_flexChild__1EqL1\",\"output\":\"RecipeInput_output__3wqnm layout_flexChild__1EqL1\",\"inputField\":\"RecipeInput_inputField__1gbO2 layout_box__1kRdL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"RecipeDefinitionsInputs_wrapper__2v3u2 layout_flexWrap__3Mh7K\",\"child\":\"RecipeDefinitionsInputs_child__1c4f3 layout_flexChild__1EqL1\",\"showDefinitionsToggle\":\"RecipeDefinitionsInputs_showDefinitionsToggle__PkZAB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"definitionField\":\"DefinitionsInput_definitionField__31i53 layout_box__1kRdL\",\"definitionFormatExample\":\"DefinitionsInput_definitionFormatExample__nVUDr typography_csvExample__3d_5u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"convertedRecipe\":\"ConvertedRecipe_convertedRecipe__3TKC3 layout_box__1kRdL\"};","var Fraction = require('fraction.js');\n\nvar defaultUnitDefinitions = require('../data/units');\n\nvar defaultIngredientDefinitions = require('../data/ingredients');\n\nvar convertIngredientError = {\n  DIVIDE_BY_ZERO: \"divide_by_zero\",\n  BAD_FORMAT: \"bad_format\",\n  BAD_DEFINITION: \"bad_definition\",\n  UNRECOGNIZED: \"unrecognized\"\n};\n\nfunction convertIngredient(ingredient, ingredient_definitions, unit_definitions) {\n  if (arguments.length === 1) {\n    ingredient_definitions = defaultIngredientDefinitions;\n    unit_definitions = defaultUnitDefinitions;\n  }\n\n  if (arguments.length === 2) {\n    unit_definitions = defaultUnitDefinitions;\n  }\n\n  var resolvedUnit = unit_definitions.find(function (unit_defintion) {\n    return unit_defintion.unit === ingredient.unit;\n  });\n  var resolvedIngredient = ingredient_definitions.find(function (ingredient_definition) {\n    return ingredient_definition.name === ingredient.name;\n  });\n  var errors = {};\n  var quantityFraction;\n\n  try {\n    quantityFraction = Fraction(ingredient.quantity);\n  } catch (e) {\n    if (e instanceof Fraction.DivisionByZero) {\n      errors.quantity = convertIngredientError.DIVIDE_BY_ZERO;\n    } else if (e instanceof Fraction.InvalidParameter) {\n      errors.quantity = convertIngredientError.BAD_FORMAT;\n    } else {\n      throw e;\n    }\n  }\n\n  if (!resolvedUnit) {\n    errors.unit = convertIngredientError.UNRECOGNIZED;\n  } else if (typeof resolvedUnit.mL !== 'number' || isNaN(resolvedUnit.mL)) {\n    errors.unit = convertIngredientError.BAD_DEFINITION;\n  }\n\n  if (!resolvedIngredient) {\n    errors.ingredient = convertIngredientError.UNRECOGNIZED;\n  } else if (typeof resolvedIngredient.density !== 'number' || isNaN(resolvedIngredient.density)) {\n    errors.ingredient = convertIngredientError.BAD_DEFINITION;\n  }\n\n  for (var attribute in errors) {\n    if (errors[attribute]) {\n      return {\n        success: false,\n        errors: errors\n      };\n    }\n  }\n\n  var convertedQuantity = quantityFraction.mul(resolvedIngredient.density).mul(resolvedUnit.mL).round().toString();\n  return {\n    success: true,\n    result: {\n      quantity: convertedQuantity,\n      unit: \"g\",\n      name: resolvedIngredient.name\n    }\n  };\n}\n\nmodule.exports = [convertIngredient, convertIngredientError];","function parseIngredient(string) {\n  var re = /^((?:\\d+ )?\\d+[/.]?\\d*)([A-z]+) +(.+)$/;\n  var matches = re.exec(string);\n\n  if (matches != null) {\n    return {\n      success: true,\n      result: {\n        quantity: matches[1],\n        unit: matches[2],\n        name: matches[3]\n      }\n    };\n  } else {\n    return {\n      success: false,\n      errorMessage: 'provided string \"' + string + '\" cannot be parsed with regex ' + re\n    };\n  }\n}\n\nmodule.exports = parseIngredient;","import React from 'react';\nimport styles from './Ingredient.module.css';\n\nexport function Ingredient(props) {\n  let quantityClassName, unitClassName, ingredientClassName;\n  if (props.errors) {\n    if (props.errors.badQuantity) {\n      quantityClassName = styles.badQuantity;\n    }\n\n    if (props.errors.unitNotFound) {\n      unitClassName = styles.unitNotFound;\n    }\n    if (props.errors.badUnitDefinition) {\n      unitClassName = styles.badUnitDefinition;\n    }\n\n    if (props.errors.ingredientNotFound) {\n      ingredientClassName = styles.ingredientNotFound;\n    }\n    if (props.errors.badIngredientDefinition) {\n      ingredientClassName = styles.badIngredientDefinition;\n    }\n  }\n\n  return (\n    <div>\n      <span className={quantityClassName}>{props.quantity}</span><span className={unitClassName}>{props.unit}</span> <span className={ingredientClassName}>{props.name}</span>\n    </div>\n  );\n}\n\nexport function MalformedIngredient(props) {\n  return (\n    <div>\n      <span className={styles.malformed}>{props.string}</span>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Ingredient, MalformedIngredient } from './Ingredient';\nimport { parseIngredient, convertIngredient, convertIngredientError } from 'reconv-domain';\nimport styles from \"./ConvertedRecipe.module.css\";\n\nexport default function ConvertedRecipe(props) {\n  const ingredients = props.recipe.split(\"\\n\").map((line, i) => {\n    const parseResult = parseIngredient(line);\n    if (parseResult.success) {\n      const parsedIngredient = parseResult.result;\n      const convertResult = convertIngredient(parsedIngredient, props.ingredientDefinitions, props.unitDefinitions);\n      if (convertResult.success) {\n        const convertedIngredient = convertResult.result;\n\n        return <Ingredient\n          key={i}\n          quantity={convertedIngredient.quantity}\n          unit={convertedIngredient.unit}\n          name={convertedIngredient.name}\n        />;\n      } else {\n        const conversionErrors = {\n          unitNotFound: convertResult.errors.unit === convertIngredientError.UNRECOGNIZED,\n          ingredientNotFound: convertResult.errors.ingredient === convertIngredientError.UNRECOGNIZED,\n          badQuantity: convertResult.errors.quantity, // no need to distinguish between BAD_FORMAT and DIVIDE_BY_ZERO yet\n          badUnitDefinition: convertResult.errors.unit === convertIngredientError.BAD_DEFINITION,\n          badIngredientDefinition: convertResult.errors.ingredient === convertIngredientError.BAD_DEFINITION,\n        }\n\n        return <Ingredient\n          key={i}\n          quantity={parsedIngredient.quantity}\n          unit={parsedIngredient.unit}\n          name={parsedIngredient.name}\n          errors={conversionErrors}\n        />;\n      }\n    } else {\n      return <MalformedIngredient key={i} string={line} />;\n    }\n  });\n\n  return (\n    <div className={styles.convertedRecipe}>\n      {ingredients}\n    </div>\n  );\n}","import React from 'react';\nimport styles from \"./RecipeInput.module.css\";\nimport ConvertedRecipe from './ConvertedRecipe';\n\nexport default class RecipeInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipe: props.recipe,\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({recipe: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className={styles.wrapper}>\n        <div className={styles.input}>\n          <h2>Recipe</h2>\n          <textarea\n            spellCheck=\"false\"\n            value={this.state.recipe}\n            onChange={this.handleChange}\n            className={styles.inputField}\n          />\n        </div>\n        <div className={styles.output}>\n          <h2>Converted Recipe</h2>\n          <ConvertedRecipe\n            recipe={this.state.recipe}\n            ingredientDefinitions={this.props.ingredientDefinitions}\n            unitDefinitions={this.props.unitDefinitions}\n          />\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport styles from \"./DefinitionsInput.module.css\";\n\nexport default function DefinitionsInput(props) {\n  return (\n    <div>\n      <h2>{props.kind} definitions</h2>\n      <p className={styles.definitionFormatExample}>{props.csvFormat}</p>\n      <textarea\n        spellCheck=\"false\"\n        onChange={props.handleValueChange}\n        value={props.value}\n        className={styles.definitionField}\n      />\n    </div>\n  );\n}","import React from 'react';\nimport styles from \"./RecipeDefinitionsInputs.module.css\";\nimport DefinitionsInput from \"./DefinitionsInput\";\n\nexport default class RecipeDefinitionsInputs extends React.Component {\n  state = {\n    showDefinitions: false,\n  };\n\n  handleShowDefinitionsChange = (event) => {\n    this.setState({showDefinitions: event.target.checked});\n  }\n\n  render() {\n    let definitions = (\n      <div className={styles.wrapper}>\n        <div className={styles.child}>\n          <DefinitionsInput\n            kind=\"Unit\"\n            csvFormat=\"unit,mL\"\n            value={this.props.unitDefinitions}\n            handleValueChange={this.props.handleUnitDefinitionsChange}\n          />\n        </div>\n\n        <div className={styles.child}>\n          <DefinitionsInput\n              kind=\"Ingredient\"\n              csvFormat=\"name,density\"\n              value={this.props.ingredientDefinitions}\n              handleValueChange={this.props.handleIngredientDefinitionsChange}\n            />\n        </div>\n      </div>\n    );\n\n    return (\n      <div>\n        <div className={styles.showDefinitionsToggle}>\n          <label>\n            <input type=\"checkbox\" value={this.state.showDefinitions} onChange={this.handleShowDefinitionsChange} />\n            Show unit/ingredient definitions\n          </label>\n        </div>\n        { this.state.showDefinitions ? definitions : null}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { defaultIngredientDefinitions, defaultUnitDefinitions } from 'reconv-domain';\nimport RecipeInput from './components/recipe/RecipeInput';\nimport RecipeDefinitionsInputs from './components/definitions/RecipeDefinitionsInputs';\n\nexport default class App extends React.Component {\n  state = {\n    unitDefinitions: defaultUnitDefinitions.map( (unit) => {\n      return unit.unit + \",\" + unit.mL\n    }).join(\"\\n\"),\n    ingredientDefinitions: defaultIngredientDefinitions.map( (ingredient) => {\n      return ingredient.name + \",\" + ingredient.density\n    }).join(\"\\n\"),\n  };\n\n  deserializeUnitDefinitions = (string) => {\n    return string.split(\"\\n\").map(line => {\n      let [unit, mL] = line.split(\",\");\n      mL = Number.parseFloat(mL, 10);\n      return { unit, mL };\n    });\n  }\n\n  deserializeIngredientDefinitions = (string) => {\n    return string.split(\"\\n\").map(line => {\n      let [name, density] = line.split(\",\");\n      density = Number.parseFloat(density, 10);\n      return { name, density };\n    });\n  }\n\n  handleUnitDefinitionsChange = (event) => {\n    this.setState({unitDefinitions: event.target.value})\n  }\n\n  handleIngredientDefinitionsChange = (event) => {\n    this.setState({ingredientDefinitions:  event.target.value})\n  }\n\n  render() {\n    const recipe = \"1/2c butter\\n1c sugar\\n2 eggs, beaten\\n3 bananas, crushed\\n1 1/2c flour\\n1t baking soda\\n1/2t salt\\n1/2t vanilla\";\n    const sparkleEmoji = <span role=\"img\" aria-label=\"sparkle\">✨</span>;\n\n    return (\n      <div>\n        <h1>Recipe Converter</h1>\n        <p>\n          Paste a recipe below and watch as it is {sparkleEmoji}magically{sparkleEmoji} converted from US volumetric units to grams!\n        </p>\n\n        <RecipeInput\n          recipe={recipe}\n          ingredientDefinitions={this.deserializeIngredientDefinitions(this.state.ingredientDefinitions)}\n          unitDefinitions={this.deserializeUnitDefinitions(this.state.unitDefinitions)}\n        />\n\n        <RecipeDefinitionsInputs\n          unitDefinitions={this.state.unitDefinitions}\n          handleUnitDefinitionsChange={this.handleUnitDefinitionsChange}\n          ingredientDefinitions={this.state.ingredientDefinitions}\n          handleIngredientDefinitionsChange={this.handleIngredientDefinitionsChange}\n        />\n      </div>\n    );\n  }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/normalize.css';\nimport './styles/base.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}